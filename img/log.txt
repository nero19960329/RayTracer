1. 可以渲染球体，另外对渲染图片进行归一化以防溢出。 Ref: Phong -> https://en.wikipedia.org/wiki/Phong_shading
2. 可以渲染无限平面，增加阴影效果。由于在发射阴影测试线时增加了小量，所以出现了一个坏点。
3. 增加了黑白格纹理及图像纹理。黑白格纹理的粒度可以调整，图像纹理只支持正方形。
4. 使用Beer-Lambert定律，实现光强衰减的模拟。两次光强衰减：光线到交点、交点到视点。I=I0*exp(-dist * density)。Ref: Beer-Lambert Law -> https://en.wikipedia.org/wiki/Beer–Lambert_law
5. 增加反射效果，表面增加了反射系数、折射系数。重构Surface，增加了Material，每个Surface由一个Material以及diffuse和emission构成。
6. 增加折射效果，并未实现球套球的这种现象。
7. 透明球后有一纯色球，可以看到倒影效果。
8. 可以渲染三角形，准备渲染网格模型。光线与三角形求交：Moller-Trumbore方法(Journal of Graphic Tools, 1997)，Ref: http://pkuwwt.github.io/scholarship/2014-04-03-ray-triangle-intersection-tests-for-dummies/
9. 可以渲染网格模型。gourd.obj -> 渲染时间：23s，dragon.obj实验数据见小本子
10. 增加双线性法向插值，注意插值后的法向量首先要归一化，然后不能根据光线来的方向来确定正反，只能根据顶点法向量经过一次计算而成。
*. 实现了以中位数切分的KD树。查阅论文On building fast kd-Trees for Ray Tracing, and on doing that in O(N log N)，初步实现了基于表面积启发式的KD树的暴力版本（O(N^2)），遍历速度有所提升。
11&12. 通过抖动采样实现抗锯齿，这两张图是每像素采样50条光线而形成。另外，实现了KD树的建立以及遍历并行化，使用openmp。
13. 实现景深效果，图13为景深(15)&抗锯齿(15)的效果。